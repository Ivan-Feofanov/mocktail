// Code generated by mocktail; DO NOT EDIT.

package a

import (
	"bytes"
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
	"golang.org/x/mod/module"
)

// pineappleMock mock of Pineapple.
type pineappleMock struct{ mock.Mock }

// newPineappleMock creates a new pineappleMock.
func newPineappleMock(tb testing.TB) *pineappleMock {
	tb.Helper()

	m := &pineappleMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *pineappleMock) Goo() (string, int, Water) {
	_ret := _m.Called()

	_ra0 := _ret.String(0)
	_rb1 := _ret.Int(1)
	_rc2, _ := _ret.Get(2).(Water)

	return _ra0, _rb1, _rc2
}

func (_m *pineappleMock) OnGoo() *pineappleGooCall {
	return &pineappleGooCall{Call: _m.Mock.On("Goo"), Parent: _m}
}

func (_m *pineappleMock) OnGooRaw() *pineappleGooCall {
	return &pineappleGooCall{Call: _m.Mock.On("Goo"), Parent: _m}
}

type pineappleGooCall struct {
	*mock.Call
	Parent *pineappleMock
}

func (_c *pineappleGooCall) Panic(msg string) *pineappleGooCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *pineappleGooCall) Once() *pineappleGooCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *pineappleGooCall) Twice() *pineappleGooCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *pineappleGooCall) Times(i int) *pineappleGooCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *pineappleGooCall) WaitUntil(w <-chan time.Time) *pineappleGooCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *pineappleGooCall) After(d time.Duration) *pineappleGooCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *pineappleGooCall) Run(fn func(args mock.Arguments)) *pineappleGooCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *pineappleGooCall) Maybe() *pineappleGooCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *pineappleGooCall) TypedReturns(a string, b int, c Water) *pineappleGooCall {
	_c.Call = _c.Return(a, b, c)
	return _c
}

func (_c *pineappleGooCall) OnGoo() *pineappleGooCall {
	return _c.Parent.OnGoo()
}

func (_c *pineappleGooCall) OnHello(bar Water) *pineappleHelloCall {
	return _c.Parent.OnHello(bar)
}

func (_c *pineappleGooCall) OnWorld() *pineappleWorldCall {
	return _c.Parent.OnWorld()
}

func (_c *pineappleGooCall) OnGooRaw() *pineappleGooCall {
	return _c.Parent.OnGooRaw()
}

func (_c *pineappleGooCall) OnHelloRaw(bar interface{}) *pineappleHelloCall {
	return _c.Parent.OnHelloRaw(bar)
}

func (_c *pineappleGooCall) OnWorldRaw() *pineappleWorldCall {
	return _c.Parent.OnWorldRaw()
}

func (_m *pineappleMock) Hello(bar Water) string {
	_ret := _m.Called(bar)

	_ra0 := _ret.String(0)

	return _ra0
}

func (_m *pineappleMock) OnHello(bar Water) *pineappleHelloCall {
	return &pineappleHelloCall{Call: _m.Mock.On("Hello", bar), Parent: _m}
}

func (_m *pineappleMock) OnHelloRaw(bar interface{}) *pineappleHelloCall {
	return &pineappleHelloCall{Call: _m.Mock.On("Hello", bar), Parent: _m}
}

type pineappleHelloCall struct {
	*mock.Call
	Parent *pineappleMock
}

func (_c *pineappleHelloCall) Panic(msg string) *pineappleHelloCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *pineappleHelloCall) Once() *pineappleHelloCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *pineappleHelloCall) Twice() *pineappleHelloCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *pineappleHelloCall) Times(i int) *pineappleHelloCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *pineappleHelloCall) WaitUntil(w <-chan time.Time) *pineappleHelloCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *pineappleHelloCall) After(d time.Duration) *pineappleHelloCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *pineappleHelloCall) Run(fn func(args mock.Arguments)) *pineappleHelloCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *pineappleHelloCall) Maybe() *pineappleHelloCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *pineappleHelloCall) TypedReturns(a string) *pineappleHelloCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *pineappleHelloCall) OnGoo() *pineappleGooCall {
	return _c.Parent.OnGoo()
}

func (_c *pineappleHelloCall) OnHello(bar Water) *pineappleHelloCall {
	return _c.Parent.OnHello(bar)
}

func (_c *pineappleHelloCall) OnWorld() *pineappleWorldCall {
	return _c.Parent.OnWorld()
}

func (_c *pineappleHelloCall) OnGooRaw() *pineappleGooCall {
	return _c.Parent.OnGooRaw()
}

func (_c *pineappleHelloCall) OnHelloRaw(bar interface{}) *pineappleHelloCall {
	return _c.Parent.OnHelloRaw(bar)
}

func (_c *pineappleHelloCall) OnWorldRaw() *pineappleWorldCall {
	return _c.Parent.OnWorldRaw()
}

func (_m *pineappleMock) World() string {
	_ret := _m.Called()

	_ra0 := _ret.String(0)

	return _ra0
}

func (_m *pineappleMock) OnWorld() *pineappleWorldCall {
	return &pineappleWorldCall{Call: _m.Mock.On("World"), Parent: _m}
}

func (_m *pineappleMock) OnWorldRaw() *pineappleWorldCall {
	return &pineappleWorldCall{Call: _m.Mock.On("World"), Parent: _m}
}

type pineappleWorldCall struct {
	*mock.Call
	Parent *pineappleMock
}

func (_c *pineappleWorldCall) Panic(msg string) *pineappleWorldCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *pineappleWorldCall) Once() *pineappleWorldCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *pineappleWorldCall) Twice() *pineappleWorldCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *pineappleWorldCall) Times(i int) *pineappleWorldCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *pineappleWorldCall) WaitUntil(w <-chan time.Time) *pineappleWorldCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *pineappleWorldCall) After(d time.Duration) *pineappleWorldCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *pineappleWorldCall) Run(fn func(args mock.Arguments)) *pineappleWorldCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *pineappleWorldCall) Maybe() *pineappleWorldCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *pineappleWorldCall) TypedReturns(a string) *pineappleWorldCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *pineappleWorldCall) OnGoo() *pineappleGooCall {
	return _c.Parent.OnGoo()
}

func (_c *pineappleWorldCall) OnHello(bar Water) *pineappleHelloCall {
	return _c.Parent.OnHello(bar)
}

func (_c *pineappleWorldCall) OnWorld() *pineappleWorldCall {
	return _c.Parent.OnWorld()
}

func (_c *pineappleWorldCall) OnGooRaw() *pineappleGooCall {
	return _c.Parent.OnGooRaw()
}

func (_c *pineappleWorldCall) OnHelloRaw(bar interface{}) *pineappleHelloCall {
	return _c.Parent.OnHelloRaw(bar)
}

func (_c *pineappleWorldCall) OnWorldRaw() *pineappleWorldCall {
	return _c.Parent.OnWorldRaw()
}

// coconutMock mock of Coconut.
type coconutMock struct{ mock.Mock }

// newCoconutMock creates a new coconutMock.
func newCoconutMock(tb testing.TB) *coconutMock {
	tb.Helper()

	m := &coconutMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *coconutMock) Boo(src *bytes.Buffer) time.Duration {
	_ret := _m.Called(src)

	_ra0, _ := _ret.Get(0).(time.Duration)

	return _ra0
}

func (_m *coconutMock) OnBoo(src *bytes.Buffer) *coconutBooCall {
	return &coconutBooCall{Call: _m.Mock.On("Boo", src), Parent: _m}
}

func (_m *coconutMock) OnBooRaw(src interface{}) *coconutBooCall {
	return &coconutBooCall{Call: _m.Mock.On("Boo", src), Parent: _m}
}

type coconutBooCall struct {
	*mock.Call
	Parent *coconutMock
}

func (_c *coconutBooCall) Panic(msg string) *coconutBooCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *coconutBooCall) Once() *coconutBooCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *coconutBooCall) Twice() *coconutBooCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *coconutBooCall) Times(i int) *coconutBooCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *coconutBooCall) WaitUntil(w <-chan time.Time) *coconutBooCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *coconutBooCall) After(d time.Duration) *coconutBooCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *coconutBooCall) Run(fn func(args mock.Arguments)) *coconutBooCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *coconutBooCall) Maybe() *coconutBooCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *coconutBooCall) TypedReturns(a time.Duration) *coconutBooCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *coconutBooCall) OnBoo(src *bytes.Buffer) *coconutBooCall {
	return _c.Parent.OnBoo(src)
}

func (_c *coconutBooCall) OnDoo(src time.Duration) *coconutDooCall {
	return _c.Parent.OnDoo(src)
}

func (_c *coconutBooCall) OnHoo(aParam string, bParam int, cParam Water) *coconutHooCall {
	return _c.Parent.OnHoo(aParam, bParam, cParam)
}

func (_c *coconutBooCall) OnJoo(aParam string, bParam int, cParam Water) *coconutJooCall {
	return _c.Parent.OnJoo(aParam, bParam, cParam)
}

func (_c *coconutBooCall) OnKoo(src string) *coconutKooCall {
	return _c.Parent.OnKoo(src)
}

func (_c *coconutBooCall) OnToo(src string) *coconutTooCall {
	return _c.Parent.OnToo(src)
}

func (_c *coconutBooCall) OnVoo(src *module.Version) *coconutVooCall {
	return _c.Parent.OnVoo(src)
}

func (_c *coconutBooCall) OnBooRaw(src interface{}) *coconutBooCall {
	return _c.Parent.OnBooRaw(src)
}

func (_c *coconutBooCall) OnDooRaw(src interface{}) *coconutDooCall {
	return _c.Parent.OnDooRaw(src)
}

func (_c *coconutBooCall) OnHooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *coconutHooCall {
	return _c.Parent.OnHooRaw(aParam, bParam, cParam)
}

func (_c *coconutBooCall) OnJooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *coconutJooCall {
	return _c.Parent.OnJooRaw(aParam, bParam, cParam)
}

func (_c *coconutBooCall) OnKooRaw(src interface{}) *coconutKooCall {
	return _c.Parent.OnKooRaw(src)
}

func (_c *coconutBooCall) OnTooRaw(src interface{}) *coconutTooCall {
	return _c.Parent.OnTooRaw(src)
}

func (_c *coconutBooCall) OnVooRaw(src interface{}) *coconutVooCall {
	return _c.Parent.OnVooRaw(src)
}

func (_m *coconutMock) Doo(src time.Duration) time.Duration {
	_ret := _m.Called(src)

	_ra0, _ := _ret.Get(0).(time.Duration)

	return _ra0
}

func (_m *coconutMock) OnDoo(src time.Duration) *coconutDooCall {
	return &coconutDooCall{Call: _m.Mock.On("Doo", src), Parent: _m}
}

func (_m *coconutMock) OnDooRaw(src interface{}) *coconutDooCall {
	return &coconutDooCall{Call: _m.Mock.On("Doo", src), Parent: _m}
}

type coconutDooCall struct {
	*mock.Call
	Parent *coconutMock
}

func (_c *coconutDooCall) Panic(msg string) *coconutDooCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *coconutDooCall) Once() *coconutDooCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *coconutDooCall) Twice() *coconutDooCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *coconutDooCall) Times(i int) *coconutDooCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *coconutDooCall) WaitUntil(w <-chan time.Time) *coconutDooCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *coconutDooCall) After(d time.Duration) *coconutDooCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *coconutDooCall) Run(fn func(args mock.Arguments)) *coconutDooCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *coconutDooCall) Maybe() *coconutDooCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *coconutDooCall) TypedReturns(a time.Duration) *coconutDooCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *coconutDooCall) OnBoo(src *bytes.Buffer) *coconutBooCall {
	return _c.Parent.OnBoo(src)
}

func (_c *coconutDooCall) OnDoo(src time.Duration) *coconutDooCall {
	return _c.Parent.OnDoo(src)
}

func (_c *coconutDooCall) OnHoo(aParam string, bParam int, cParam Water) *coconutHooCall {
	return _c.Parent.OnHoo(aParam, bParam, cParam)
}

func (_c *coconutDooCall) OnJoo(aParam string, bParam int, cParam Water) *coconutJooCall {
	return _c.Parent.OnJoo(aParam, bParam, cParam)
}

func (_c *coconutDooCall) OnKoo(src string) *coconutKooCall {
	return _c.Parent.OnKoo(src)
}

func (_c *coconutDooCall) OnToo(src string) *coconutTooCall {
	return _c.Parent.OnToo(src)
}

func (_c *coconutDooCall) OnVoo(src *module.Version) *coconutVooCall {
	return _c.Parent.OnVoo(src)
}

func (_c *coconutDooCall) OnBooRaw(src interface{}) *coconutBooCall {
	return _c.Parent.OnBooRaw(src)
}

func (_c *coconutDooCall) OnDooRaw(src interface{}) *coconutDooCall {
	return _c.Parent.OnDooRaw(src)
}

func (_c *coconutDooCall) OnHooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *coconutHooCall {
	return _c.Parent.OnHooRaw(aParam, bParam, cParam)
}

func (_c *coconutDooCall) OnJooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *coconutJooCall {
	return _c.Parent.OnJooRaw(aParam, bParam, cParam)
}

func (_c *coconutDooCall) OnKooRaw(src interface{}) *coconutKooCall {
	return _c.Parent.OnKooRaw(src)
}

func (_c *coconutDooCall) OnTooRaw(src interface{}) *coconutTooCall {
	return _c.Parent.OnTooRaw(src)
}

func (_c *coconutDooCall) OnVooRaw(src interface{}) *coconutVooCall {
	return _c.Parent.OnVooRaw(src)
}

func (_m *coconutMock) Hoo(aParam string, bParam int, cParam Water) {
	_m.Called(aParam, bParam, cParam)
}

func (_m *coconutMock) OnHoo(aParam string, bParam int, cParam Water) *coconutHooCall {
	return &coconutHooCall{Call: _m.Mock.On("Hoo", aParam, bParam, cParam), Parent: _m}
}

func (_m *coconutMock) OnHooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *coconutHooCall {
	return &coconutHooCall{Call: _m.Mock.On("Hoo", aParam, bParam, cParam), Parent: _m}
}

type coconutHooCall struct {
	*mock.Call
	Parent *coconutMock
}

func (_c *coconutHooCall) Panic(msg string) *coconutHooCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *coconutHooCall) Once() *coconutHooCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *coconutHooCall) Twice() *coconutHooCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *coconutHooCall) Times(i int) *coconutHooCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *coconutHooCall) WaitUntil(w <-chan time.Time) *coconutHooCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *coconutHooCall) After(d time.Duration) *coconutHooCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *coconutHooCall) Run(fn func(args mock.Arguments)) *coconutHooCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *coconutHooCall) Maybe() *coconutHooCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *coconutHooCall) OnBoo(src *bytes.Buffer) *coconutBooCall {
	return _c.Parent.OnBoo(src)
}

func (_c *coconutHooCall) OnDoo(src time.Duration) *coconutDooCall {
	return _c.Parent.OnDoo(src)
}

func (_c *coconutHooCall) OnHoo(aParam string, bParam int, cParam Water) *coconutHooCall {
	return _c.Parent.OnHoo(aParam, bParam, cParam)
}

func (_c *coconutHooCall) OnJoo(aParam string, bParam int, cParam Water) *coconutJooCall {
	return _c.Parent.OnJoo(aParam, bParam, cParam)
}

func (_c *coconutHooCall) OnKoo(src string) *coconutKooCall {
	return _c.Parent.OnKoo(src)
}

func (_c *coconutHooCall) OnToo(src string) *coconutTooCall {
	return _c.Parent.OnToo(src)
}

func (_c *coconutHooCall) OnVoo(src *module.Version) *coconutVooCall {
	return _c.Parent.OnVoo(src)
}

func (_c *coconutHooCall) OnBooRaw(src interface{}) *coconutBooCall {
	return _c.Parent.OnBooRaw(src)
}

func (_c *coconutHooCall) OnDooRaw(src interface{}) *coconutDooCall {
	return _c.Parent.OnDooRaw(src)
}

func (_c *coconutHooCall) OnHooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *coconutHooCall {
	return _c.Parent.OnHooRaw(aParam, bParam, cParam)
}

func (_c *coconutHooCall) OnJooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *coconutJooCall {
	return _c.Parent.OnJooRaw(aParam, bParam, cParam)
}

func (_c *coconutHooCall) OnKooRaw(src interface{}) *coconutKooCall {
	return _c.Parent.OnKooRaw(src)
}

func (_c *coconutHooCall) OnTooRaw(src interface{}) *coconutTooCall {
	return _c.Parent.OnTooRaw(src)
}

func (_c *coconutHooCall) OnVooRaw(src interface{}) *coconutVooCall {
	return _c.Parent.OnVooRaw(src)
}

func (_m *coconutMock) Joo(aParam string, bParam int, cParam Water) (string, int) {
	_ret := _m.Called(aParam, bParam, cParam)

	_ra0 := _ret.String(0)
	_rb1 := _ret.Int(1)

	return _ra0, _rb1
}

func (_m *coconutMock) OnJoo(aParam string, bParam int, cParam Water) *coconutJooCall {
	return &coconutJooCall{Call: _m.Mock.On("Joo", aParam, bParam, cParam), Parent: _m}
}

func (_m *coconutMock) OnJooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *coconutJooCall {
	return &coconutJooCall{Call: _m.Mock.On("Joo", aParam, bParam, cParam), Parent: _m}
}

type coconutJooCall struct {
	*mock.Call
	Parent *coconutMock
}

func (_c *coconutJooCall) Panic(msg string) *coconutJooCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *coconutJooCall) Once() *coconutJooCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *coconutJooCall) Twice() *coconutJooCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *coconutJooCall) Times(i int) *coconutJooCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *coconutJooCall) WaitUntil(w <-chan time.Time) *coconutJooCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *coconutJooCall) After(d time.Duration) *coconutJooCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *coconutJooCall) Run(fn func(args mock.Arguments)) *coconutJooCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *coconutJooCall) Maybe() *coconutJooCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *coconutJooCall) TypedReturns(a string, b int) *coconutJooCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *coconutJooCall) OnBoo(src *bytes.Buffer) *coconutBooCall {
	return _c.Parent.OnBoo(src)
}

func (_c *coconutJooCall) OnDoo(src time.Duration) *coconutDooCall {
	return _c.Parent.OnDoo(src)
}

func (_c *coconutJooCall) OnHoo(aParam string, bParam int, cParam Water) *coconutHooCall {
	return _c.Parent.OnHoo(aParam, bParam, cParam)
}

func (_c *coconutJooCall) OnJoo(aParam string, bParam int, cParam Water) *coconutJooCall {
	return _c.Parent.OnJoo(aParam, bParam, cParam)
}

func (_c *coconutJooCall) OnKoo(src string) *coconutKooCall {
	return _c.Parent.OnKoo(src)
}

func (_c *coconutJooCall) OnToo(src string) *coconutTooCall {
	return _c.Parent.OnToo(src)
}

func (_c *coconutJooCall) OnVoo(src *module.Version) *coconutVooCall {
	return _c.Parent.OnVoo(src)
}

func (_c *coconutJooCall) OnBooRaw(src interface{}) *coconutBooCall {
	return _c.Parent.OnBooRaw(src)
}

func (_c *coconutJooCall) OnDooRaw(src interface{}) *coconutDooCall {
	return _c.Parent.OnDooRaw(src)
}

func (_c *coconutJooCall) OnHooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *coconutHooCall {
	return _c.Parent.OnHooRaw(aParam, bParam, cParam)
}

func (_c *coconutJooCall) OnJooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *coconutJooCall {
	return _c.Parent.OnJooRaw(aParam, bParam, cParam)
}

func (_c *coconutJooCall) OnKooRaw(src interface{}) *coconutKooCall {
	return _c.Parent.OnKooRaw(src)
}

func (_c *coconutJooCall) OnTooRaw(src interface{}) *coconutTooCall {
	return _c.Parent.OnTooRaw(src)
}

func (_c *coconutJooCall) OnVooRaw(src interface{}) *coconutVooCall {
	return _c.Parent.OnVooRaw(src)
}

func (_m *coconutMock) Koo(src string) string {
	_ret := _m.Called(src)

	dst := _ret.String(0)

	return dst
}

func (_m *coconutMock) OnKoo(src string) *coconutKooCall {
	return &coconutKooCall{Call: _m.Mock.On("Koo", src), Parent: _m}
}

func (_m *coconutMock) OnKooRaw(src interface{}) *coconutKooCall {
	return &coconutKooCall{Call: _m.Mock.On("Koo", src), Parent: _m}
}

type coconutKooCall struct {
	*mock.Call
	Parent *coconutMock
}

func (_c *coconutKooCall) Panic(msg string) *coconutKooCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *coconutKooCall) Once() *coconutKooCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *coconutKooCall) Twice() *coconutKooCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *coconutKooCall) Times(i int) *coconutKooCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *coconutKooCall) WaitUntil(w <-chan time.Time) *coconutKooCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *coconutKooCall) After(d time.Duration) *coconutKooCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *coconutKooCall) Run(fn func(args mock.Arguments)) *coconutKooCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *coconutKooCall) Maybe() *coconutKooCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *coconutKooCall) TypedReturns(a string) *coconutKooCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *coconutKooCall) OnBoo(src *bytes.Buffer) *coconutBooCall {
	return _c.Parent.OnBoo(src)
}

func (_c *coconutKooCall) OnDoo(src time.Duration) *coconutDooCall {
	return _c.Parent.OnDoo(src)
}

func (_c *coconutKooCall) OnHoo(aParam string, bParam int, cParam Water) *coconutHooCall {
	return _c.Parent.OnHoo(aParam, bParam, cParam)
}

func (_c *coconutKooCall) OnJoo(aParam string, bParam int, cParam Water) *coconutJooCall {
	return _c.Parent.OnJoo(aParam, bParam, cParam)
}

func (_c *coconutKooCall) OnKoo(src string) *coconutKooCall {
	return _c.Parent.OnKoo(src)
}

func (_c *coconutKooCall) OnToo(src string) *coconutTooCall {
	return _c.Parent.OnToo(src)
}

func (_c *coconutKooCall) OnVoo(src *module.Version) *coconutVooCall {
	return _c.Parent.OnVoo(src)
}

func (_c *coconutKooCall) OnBooRaw(src interface{}) *coconutBooCall {
	return _c.Parent.OnBooRaw(src)
}

func (_c *coconutKooCall) OnDooRaw(src interface{}) *coconutDooCall {
	return _c.Parent.OnDooRaw(src)
}

func (_c *coconutKooCall) OnHooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *coconutHooCall {
	return _c.Parent.OnHooRaw(aParam, bParam, cParam)
}

func (_c *coconutKooCall) OnJooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *coconutJooCall {
	return _c.Parent.OnJooRaw(aParam, bParam, cParam)
}

func (_c *coconutKooCall) OnKooRaw(src interface{}) *coconutKooCall {
	return _c.Parent.OnKooRaw(src)
}

func (_c *coconutKooCall) OnTooRaw(src interface{}) *coconutTooCall {
	return _c.Parent.OnTooRaw(src)
}

func (_c *coconutKooCall) OnVooRaw(src interface{}) *coconutVooCall {
	return _c.Parent.OnVooRaw(src)
}

func (_m *coconutMock) Too(src string) time.Duration {
	_ret := _m.Called(src)

	_ra0, _ := _ret.Get(0).(time.Duration)

	return _ra0
}

func (_m *coconutMock) OnToo(src string) *coconutTooCall {
	return &coconutTooCall{Call: _m.Mock.On("Too", src), Parent: _m}
}

func (_m *coconutMock) OnTooRaw(src interface{}) *coconutTooCall {
	return &coconutTooCall{Call: _m.Mock.On("Too", src), Parent: _m}
}

type coconutTooCall struct {
	*mock.Call
	Parent *coconutMock
}

func (_c *coconutTooCall) Panic(msg string) *coconutTooCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *coconutTooCall) Once() *coconutTooCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *coconutTooCall) Twice() *coconutTooCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *coconutTooCall) Times(i int) *coconutTooCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *coconutTooCall) WaitUntil(w <-chan time.Time) *coconutTooCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *coconutTooCall) After(d time.Duration) *coconutTooCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *coconutTooCall) Run(fn func(args mock.Arguments)) *coconutTooCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *coconutTooCall) Maybe() *coconutTooCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *coconutTooCall) TypedReturns(a time.Duration) *coconutTooCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *coconutTooCall) OnBoo(src *bytes.Buffer) *coconutBooCall {
	return _c.Parent.OnBoo(src)
}

func (_c *coconutTooCall) OnDoo(src time.Duration) *coconutDooCall {
	return _c.Parent.OnDoo(src)
}

func (_c *coconutTooCall) OnHoo(aParam string, bParam int, cParam Water) *coconutHooCall {
	return _c.Parent.OnHoo(aParam, bParam, cParam)
}

func (_c *coconutTooCall) OnJoo(aParam string, bParam int, cParam Water) *coconutJooCall {
	return _c.Parent.OnJoo(aParam, bParam, cParam)
}

func (_c *coconutTooCall) OnKoo(src string) *coconutKooCall {
	return _c.Parent.OnKoo(src)
}

func (_c *coconutTooCall) OnToo(src string) *coconutTooCall {
	return _c.Parent.OnToo(src)
}

func (_c *coconutTooCall) OnVoo(src *module.Version) *coconutVooCall {
	return _c.Parent.OnVoo(src)
}

func (_c *coconutTooCall) OnBooRaw(src interface{}) *coconutBooCall {
	return _c.Parent.OnBooRaw(src)
}

func (_c *coconutTooCall) OnDooRaw(src interface{}) *coconutDooCall {
	return _c.Parent.OnDooRaw(src)
}

func (_c *coconutTooCall) OnHooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *coconutHooCall {
	return _c.Parent.OnHooRaw(aParam, bParam, cParam)
}

func (_c *coconutTooCall) OnJooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *coconutJooCall {
	return _c.Parent.OnJooRaw(aParam, bParam, cParam)
}

func (_c *coconutTooCall) OnKooRaw(src interface{}) *coconutKooCall {
	return _c.Parent.OnKooRaw(src)
}

func (_c *coconutTooCall) OnTooRaw(src interface{}) *coconutTooCall {
	return _c.Parent.OnTooRaw(src)
}

func (_c *coconutTooCall) OnVooRaw(src interface{}) *coconutVooCall {
	return _c.Parent.OnVooRaw(src)
}

func (_m *coconutMock) Voo(src *module.Version) time.Duration {
	_ret := _m.Called(src)

	_ra0, _ := _ret.Get(0).(time.Duration)

	return _ra0
}

func (_m *coconutMock) OnVoo(src *module.Version) *coconutVooCall {
	return &coconutVooCall{Call: _m.Mock.On("Voo", src), Parent: _m}
}

func (_m *coconutMock) OnVooRaw(src interface{}) *coconutVooCall {
	return &coconutVooCall{Call: _m.Mock.On("Voo", src), Parent: _m}
}

type coconutVooCall struct {
	*mock.Call
	Parent *coconutMock
}

func (_c *coconutVooCall) Panic(msg string) *coconutVooCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *coconutVooCall) Once() *coconutVooCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *coconutVooCall) Twice() *coconutVooCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *coconutVooCall) Times(i int) *coconutVooCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *coconutVooCall) WaitUntil(w <-chan time.Time) *coconutVooCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *coconutVooCall) After(d time.Duration) *coconutVooCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *coconutVooCall) Run(fn func(args mock.Arguments)) *coconutVooCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *coconutVooCall) Maybe() *coconutVooCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *coconutVooCall) TypedReturns(a time.Duration) *coconutVooCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *coconutVooCall) OnBoo(src *bytes.Buffer) *coconutBooCall {
	return _c.Parent.OnBoo(src)
}

func (_c *coconutVooCall) OnDoo(src time.Duration) *coconutDooCall {
	return _c.Parent.OnDoo(src)
}

func (_c *coconutVooCall) OnHoo(aParam string, bParam int, cParam Water) *coconutHooCall {
	return _c.Parent.OnHoo(aParam, bParam, cParam)
}

func (_c *coconutVooCall) OnJoo(aParam string, bParam int, cParam Water) *coconutJooCall {
	return _c.Parent.OnJoo(aParam, bParam, cParam)
}

func (_c *coconutVooCall) OnKoo(src string) *coconutKooCall {
	return _c.Parent.OnKoo(src)
}

func (_c *coconutVooCall) OnToo(src string) *coconutTooCall {
	return _c.Parent.OnToo(src)
}

func (_c *coconutVooCall) OnVoo(src *module.Version) *coconutVooCall {
	return _c.Parent.OnVoo(src)
}

func (_c *coconutVooCall) OnBooRaw(src interface{}) *coconutBooCall {
	return _c.Parent.OnBooRaw(src)
}

func (_c *coconutVooCall) OnDooRaw(src interface{}) *coconutDooCall {
	return _c.Parent.OnDooRaw(src)
}

func (_c *coconutVooCall) OnHooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *coconutHooCall {
	return _c.Parent.OnHooRaw(aParam, bParam, cParam)
}

func (_c *coconutVooCall) OnJooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *coconutJooCall {
	return _c.Parent.OnJooRaw(aParam, bParam, cParam)
}

func (_c *coconutVooCall) OnKooRaw(src interface{}) *coconutKooCall {
	return _c.Parent.OnKooRaw(src)
}

func (_c *coconutVooCall) OnTooRaw(src interface{}) *coconutTooCall {
	return _c.Parent.OnTooRaw(src)
}

func (_c *coconutVooCall) OnVooRaw(src interface{}) *coconutVooCall {
	return _c.Parent.OnVooRaw(src)
}
